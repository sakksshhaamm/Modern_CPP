create a class called Car with the following features


    -a carBrand attributes of type string
    -a carModel attributes of type string
    -a carType attributes of type enum CAR_TYPE that can have these categories{SUV,SEDAN,HATCHBACK}
    -a carPrice attribute of type float

    -a constructor that takes only 2 parameters carBrand and carModel
    
    -a constructor that take 3 parameters carBrand, carModel,carType
    -a constructor that takes all 4 attributes

    -a function calculateInsuranceAmount which calculates insurance as per the following rules
    for SUV and Sedan 10% of carPrice
    for HATCHBACK, amount is 5 % of carPrice


    -a virtual destructor
    -a copy constructor generated by the compilier
    -a deleted default constructor
    -all getters and setters
    -an overload << operator

Create following functions in functionalities.cpp file
    a- FindHighestInsurance amount that accepts a standard list of Car pointers & returns the highest amount for insurance among the car objects pointed by the list of pointer
    b- FindCountofGivenType that accepts three parameters: a standard list of Car pointers,an 
    enum class CAR_TYPE value and a limit of type of  float,the function must return the count of Cars that match with passed CAR_TYPE "IF ITS PRICE IS LESS THAN OR EQUAL TO THE LIMIT SPECIFIED BY THE LIMIT PARAMETER" 
